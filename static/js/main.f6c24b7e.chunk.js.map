{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","input","setInput","handleInput","char","lastNumHasDecimalRegex","test","console","log","appendChar","handleDecimal","handleClosingParen","deleteLastChar","handleSymbol","newChar","prevInput","num","length","endsWithNegSymbol","prevState","toString","slice","calculateInput","missingClosingParenRegex","endsWithSymbolRegex","eval","className","id","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f6c24b7e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [input, setInput] = useState(\"0\");\n\n  const handleInput = (char) => {\n    const handleDecimal = () => {\n      const lastNumHasDecimalRegex = /([\\d]*\\.[\\d]*)$/;\n      const endsWithSymbolRegex = /[+\\-*/]$/;\n      if (input === \"0\") {\n        setInput(\"0.\");\n        return;\n      } else if (lastNumHasDecimalRegex.test(input)) {\n        console.log(`you shouldn't be able to add another decimal here`);\n        return;\n      } else if (endsWithSymbolRegex.test(input)) {\n        appendChar(`0.`);\n      } else {\n        console.log(\n          `last num has decimal test: ${lastNumHasDecimalRegex.test(input)}`\n        );\n        appendChar(char);\n      }\n    };\n\n    const handleSymbol = () => {\n      //regex for symbol checking\n      handleClosingParen();\n      const endsWithSymbol = /[+\\-*/]$/g;\n      const endsWithNegSymbol = /\\(-$/g;\n      //if you're adding a symbol and the last character is \"(-\"\n      if (endsWithNegSymbol.test(input)) {\n        //replace the symbol with the new one\n        deleteLastChar(3);\n        appendChar(`${char}`);\n        return;\n      }\n      //else check if it ends with a symbol already\n      else if (endsWithSymbol.test(input)) {\n        //if we're trying to add a negative when there's already a symbol at the end then add a \"(-\" so it become a negative number\n        if (char === \"-\") {\n          appendChar(\"(-\");\n        } else {\n          //replace last symbol with the new symbol\n          deleteLastChar();\n          appendChar(char);\n        }\n      } else if (input === \"0\") {\n        appendChar(`0${char}`);\n      }\n      //else add the symbol to the end\n      else {\n        appendChar(char);\n      }\n    };\n\n    switch (char) {\n      case \".\":\n        handleDecimal();\n        break;\n      case \"+\":\n      case \"/\":\n      case \"*\":\n      case \"-\":\n        handleSymbol();\n        break;\n      case \"0\":\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        appendChar(char);\n        break;\n      default:\n        console.log(`Non-Standard Character Entered`);\n    }\n  };\n\n  const appendChar = (newChar) => {\n    if (input === \"0\") {\n      setInput(newChar);\n      return;\n    }\n    if (input === \"Infinity\") {\n      setInput(newChar);\n    } else {\n      setInput((prevInput) => prevInput + newChar);\n    }\n  };\n\n  const handleClosingParen = () => {\n    const missingClosingParenRegex = /(\\(-[\\d.*]+)$/g;\n    if (missingClosingParenRegex.test(input)) {\n      appendChar(\")\");\n    }\n  };\n\n  const deleteLastChar = (num = 1) => {\n    if (input.length === 1) {\n      setInput(\"0\");\n      return;\n    }\n    //removes last two characters if last character is a \"(-\"\n    const endsWithNegSymbol = /\\(-$/g;\n    if (endsWithNegSymbol.test(input) && num === 1) {\n      setInput((prevState) => prevState.toString().slice(0, -2));\n      return;\n    } else {\n      setInput((prevState) => prevState.toString().slice(0, -num));\n    }\n  };\n\n  const calculateInput = () => {\n    const missingClosingParenRegex = /(\\(-[\\d.*]+)$/g;\n    const endsWithSymbolRegex = /[+\\-*/]$/g;\n    if (missingClosingParenRegex.test(input)) {\n      // eslint-disable-next-line\n      setInput(eval(`${input})`));\n    } else if (endsWithSymbolRegex.test(input)) {\n      // eslint-disable-next-line\n      setInput(eval(input.slice(0, -1)));\n    } else {\n      // eslint-disable-next-line\n      setInput(eval(input));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"title\">My Javascript Calculator</h1>\n        <div className=\"calculator-app\">\n          <h2 id=\"display\" className=\"calcInput\">\n            {input}\n          </h2>\n          <div className=\"calcBtnContainer\">\n            <button\n              id=\"clear\"\n              className=\"functionBtn\"\n              onClick={() => setInput(\"0\")}\n            >\n              AC\n            </button>\n            <button\n              id=\"deleteBtn\"\n              className=\"functionBtn\"\n              onClick={() => deleteLastChar()}\n            >\n              DEL\n            </button>\n            <button\n              id=\"divide\"\n              className=\"symbolBtn\"\n              onClick={() => handleInput(\"/\")}\n            >\n              /\n            </button>\n            <button\n              id=\"multiply\"\n              className=\"symbolBtn\"\n              onClick={() => handleInput(\"*\")}\n            >\n              *\n            </button>\n            <button\n              id=\"seven\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\"7\")}\n            >\n              7\n            </button>\n            <button\n              id=\"eight\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\"8\")}\n            >\n              8\n            </button>\n            <button\n              id=\"nine\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\"9\")}\n            >\n              9\n            </button>\n            <button\n              id=\"subtract\"\n              className=\"symbolBtn\"\n              onClick={() => handleInput(\"-\")}\n            >\n              -\n            </button>\n            <button\n              id=\"four\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\"4\")}\n            >\n              4\n            </button>\n            <button\n              id=\"five\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\"5\")}\n            >\n              5\n            </button>\n            <button\n              id=\"six\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\"6\")}\n            >\n              6\n            </button>\n            <button\n              id=\"add\"\n              className=\"symbolBtn\"\n              onClick={() => handleInput(\"+\")}\n            >\n              +\n            </button>\n            <button\n              id=\"one\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\"1\")}\n            >\n              1\n            </button>\n            <button\n              id=\"two\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\"2\")}\n            >\n              2\n            </button>\n            <button\n              id=\"three\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\"3\")}\n            >\n              3\n            </button>\n            <button\n              id=\"equals\"\n              className=\"functionBtn\"\n              onClick={() => calculateInput()}\n            >\n              =\n            </button>\n            <button\n              id=\"zero\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\"0\")}\n            >\n              0\n            </button>\n            <button\n              id=\"decimal\"\n              className=\"numberBtn\"\n              onClick={() => handleInput(\".\")}\n            >\n              .\n            </button>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}